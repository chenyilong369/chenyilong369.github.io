(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{390:function(t,a,s){"use strict";s.r(a);var v=s(41),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"编译器和解释器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[t._v("#")]),t._v(" 编译器和解释器")]),t._v(" "),s("p",[t._v("为什么会出现编译器和解释器呢，因为计算机无法理解我们写的代码，在执行程序之前，需要将我们写的代码转化为机器语言。")]),t._v(" "),s("h2",{attrs:{id:"编译型语言和解释型语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译型语言和解释型语言"}},[t._v("#")]),t._v(" 编译型语言和解释型语言")]),t._v(" "),s("p",[t._v("按语言的执行流程，可以把语言划分为编译型语言和解释型语言。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/Compiler01.png"),alt:"Compiler01"}}),t._v(" "),s("p",[t._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重新编译了。")]),t._v(" "),s("p",[t._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行。")]),t._v(" "),s("p",[t._v("在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析，生成抽象语法树（AST），然后是优化代码，最后再生成处理器能够理解的机器码。如果编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误，那么编译器就会抛出异常，最后的二进制文件也不会生成成功。")]),t._v(" "),s("p",[t._v("在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生成抽象语法树（AST），不过它会再基于抽象语法树生成字节码，最后再根据字节码来执行程序、输出结果。")]),t._v(" "),s("h2",{attrs:{id:"v8-如何执行-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v8-如何执行-js"}},[t._v("#")]),t._v(" V8 如何执行 JS")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/Compiler02.png"),alt:"Compiler02"}}),t._v(" "),s("p",[t._v("可以看到，V8 在执行过程中既有解释器 Ignition，又有编译器 TurboFan。接下来分析一下执行流程。")]),t._v(" "),s("h3",{attrs:{id:"生成-ast-和执行上下文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成-ast-和执行上下文"}},[t._v("#")]),t._v(" 生成 AST 和执行上下文")]),t._v(" "),s("p",[t._v("将源代码转换为抽象语法树，并生成执行上下文，由于执行上下文前面提过，此处不再说明。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" myName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jsChen"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmyName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chenyilong369"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("img",{attrs:{src:t.$withBase("/Compiler03.png"),alt:"Compiler03"}}),t._v(" "),s("p",[t._v("可以看出，AST 的结构和代码的结构非常相似。")]),t._v(" "),s("p",[t._v("AST 是非常重要的一种数据结构，在很多项目中有着广泛的应用。其中最著名的一个项目是 Babel。Babel 是一个被广泛使用的代码转码器，可以将 ES6 代码转为 ES5 代码，这意味着你可以现在就用 ES6 编写程序，而不用担心现有环境是否支持 ES6。Babel 的工作原理就是先将 ES6 源码转换为 AST，然后再将 ES6 语法的 AST 转换为 ES5 语法的 AST，最后利用 ES5 的 AST 生成 JavaScript 源代码。")]),t._v(" "),s("p",[t._v("ESLint 也使用 AST。ESLint 是一个用来检查 JavaScript 编写规范的插件，其检测流程也是需要将源码转换为 AST，然后再利用 AST 来检查代码规范化的问题。")]),t._v(" "),s("p",[t._v("那么，如何生成 AST 呢，生成 AST 有两个阶段。")]),t._v(" "),s("p",[t._v("第一阶段是分词，又称为"),s("code",[t._v("词法分析")]),t._v("。将一行行的源码拆解成一个个 token。")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("token")]),t._v(" "),s("p",[t._v("token，指的是语法上不可能再分的、最小的单个字符或字符串。")])]),t._v(" "),s("p",[t._v("通过var myName = “jsChen” 简单地定义了一个变量，其中关键字“var”、标识符“myName” 、赋值运算符“=”、字符串“jsChen”四个都是 token，而且它们代表的属性还不一样。")]),t._v(" "),s("p",[t._v("第二阶段是解析，又称为"),s("code",[t._v("语法分析")]),t._v("。将上一步生成的 token 数据，根据语法规则转为 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语法错误，这一步就会终止，并抛出一个“语法错误”。")]),t._v(" "),s("p",[t._v("有了 AST 后，那接下来 V8 就会生成该段代码的执行上下文。")]),t._v(" "),s("h3",{attrs:{id:"生成字节码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生成字节码"}},[t._v("#")]),t._v(" 生成字节码")]),t._v(" "),s("p",[t._v("有了 AST 和执行上下文后，解释器 Ignition 会根据 AST 生成字节码，并解释执行字节码。")]),t._v(" "),s("p",[s("strong",[t._v("字节码是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需要通过解释器将其转换为机器码后才能执行。")])]),t._v(" "),s("p",[t._v("机器码所占用的空间远远超过了字节码，所以使用字节码可以减少系统的内存使用。")]),t._v(" "),s("h3",{attrs:{id:"执行代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行代码"}},[t._v("#")]),t._v(" 执行代码")]),t._v(" "),s("p",[t._v("如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。")]),t._v(" "),s("p",[t._v("如果在执行过程中发现有"),s("code",[t._v("热点代码")]),t._v("，比如一段代码被重复执行多次，这种就称为热点代码，那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大大提升了代码的执行效率。")]),t._v(" "),s("p",[t._v("这种字节码配合解释器和编译器的技术正是"),s("strong",[t._v("即时编译（JIT）")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),s("p",[t._v("应该将优化的中心聚焦在单次脚本的执行时间和脚本的网络下载上：")]),t._v(" "),s("ul",[s("li",[t._v("提升单次脚本的执行速度，避免 JavaScript 的长任务霸占主线程，这样可以使得页面快速响应交互；")]),t._v(" "),s("li",[t._v("避免大的内联脚本，因为在解析 HTML 的过程中，解析和编译也会占用主线程；")]),t._v(" "),s("li",[t._v("减少 JavaScript 文件的容量，因为更小的文件会提升下载速度，并且占用更低的内存。")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/Compiler04.png"),alt:"Compiler04"}}),t._v(" "),s("p",[t._v("V8 依据 JavaScript 代码生成 AST 和执行上下文，再基于 AST 生成字节码，然后通过解释器执行字节码，通过编译器来优化编译字节码。")]),t._v(" "),s("p",[t._v("其实，从上面的讲述可以知道，V8 执行时间越久，执行效率越高。原因在于热点代码也会增加，将其转化为了机器码来执行。")])])}),[],!1,null,null,null);a.default=r.exports}}]);