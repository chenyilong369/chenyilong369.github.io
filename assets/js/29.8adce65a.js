(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{388:function(v,_,t){"use strict";t.r(_);var a=t(41),i=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"高效操作-dom-元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高效操作-dom-元素"}},[v._v("#")]),v._v(" 高效操作 DOM 元素")]),v._v(" "),t("p",[v._v("DOM（Document Object Model，文档对象模型）是 JavaScript 操作 HTML 的接口。有很多功能可以用 DOM 来解决。比如：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("动态渲染列表、表格表单数据；")])]),v._v(" "),t("li",[t("p",[v._v("监听点击、提交事件；")])]),v._v(" "),t("li",[t("p",[v._v("懒加载一些脚本或样式文件；")])]),v._v(" "),t("li",[t("p",[v._v("实现动态展开树组件，表单组件级联等这类复杂的操作。")])])]),v._v(" "),t("p",[v._v("将 DOM 的所有内容归纳起来，主要由 3 个部分组成")]),v._v(" "),t("ul",[t("li",[v._v("DOM 节点")]),v._v(" "),t("li",[v._v("DOM 事件")]),v._v(" "),t("li",[v._v("选择区域")])]),v._v(" "),t("p",[v._v("对于 DOM 节点，需与另外两个概念标签和元素进行区分：")]),v._v(" "),t("ul",[t("li",[v._v("标签是 HTML 的基本单位，比如 p、div、input；")]),v._v(" "),t("li",[v._v("节点是 DOM 树的基本单位，有多种类型，比如注释节点、文本节点；")]),v._v(" "),t("li",[v._v("元素是节点中的一种，与 HTML 标签相对应，比如 p 标签会对应 p 元素。")])]),v._v(" "),t("h2",{attrs:{id:"dom-操作耗时原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-操作耗时原因"}},[v._v("#")]),v._v(" DOM 操作耗时原因")]),v._v(" "),t("h3",{attrs:{id:"线程切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程切换"}},[v._v("#")]),v._v(" 线程切换")]),v._v(" "),t("p",[v._v("浏览器包含渲染引擎（也称浏览器内核）和 JavaScript 引擎，它们都是单线程运行。")]),v._v(" "),t("p",[v._v("浏览器为了避免两个引擎同时修改页面而造成渲染结果不一致的情况，增加了另外一个机制，这两个引擎具有互斥性，也就是说在某个时刻只有一个引擎在运行，另一个引擎会被阻塞。操作系统在进行线程切换的时候需要保存上一个线程执行时的状态信息并读取下一个线程的状态信息，俗称"),t("code",[v._v("上下文切换")]),v._v("。而这个操作相对而言是比较耗时的。")]),v._v(" "),t("p",[v._v("每次 DOM 操作就会引发线程的上下文切换——从 JavaScript 引擎切换到渲染引擎执行对应操作，然后再切换回 JavaScript 引擎继续执行，这就带来了性能损耗。")]),v._v(" "),t("h3",{attrs:{id:"重新渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重新渲染"}},[v._v("#")]),v._v(" 重新渲染")]),v._v(" "),t("p",[v._v("由于元素及样式变化时会引起再次渲染，而在渲染过程中最耗时的两个步骤为重排（Reflow）与重绘（Repaint）。这样过多的渲染也会带来性能损耗。")]),v._v(" "),t("p",[v._v("浏览器在渲染页面时会将 HTML 和 CSS 分别解析成 DOM 树和 CSSOM 树，然后合并进行排布，再绘制成我们可见的页面。如果在操作 DOM 时涉及到元素、样式的修改，就会引起渲染引擎重新计算样式生成 CSSOM 树，同时还有可能触发对元素的重新排布（简称“重排”）和重新绘制（简称“重绘”）。")]),v._v(" "),t("p",[v._v("下面列举一下那些事件会引发重排和重绘，"),t("code",[v._v("修改元素边距、大小，添加、删除元素，改变窗口大小")]),v._v("等影响到其他元素排布的操作会引起重排，既而引发重绘。"),t("code",[v._v("设置背景图片，修改字体颜色，改变 visibility 属性值")]),v._v("等只会引发重绘。")]),v._v(" "),t("h2",{attrs:{id:"如何高效操作-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何高效操作-dom"}},[v._v("#")]),v._v(" 如何高效操作 DOM")]),v._v(" "),t("ul",[t("li",[v._v("在循环外操作元素")]),v._v(" "),t("li",[v._v("批量操作元素")]),v._v(" "),t("li",[v._v("缓存元素集合")])]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("本文讲述了 DOM 耗时的原因，以及解决办法。")]),v._v(" "),t("p",[v._v("还有一些原则也可能帮助我们提升渲染性能，比如：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("尽量不要使用复杂的匹配规则和复杂的样式，从而减少渲染引擎计算样式规则生成 CSSOM 树的时间；")])]),v._v(" "),t("li",[t("p",[v._v("尽量减少重排和重绘影响的区域；")])]),v._v(" "),t("li",[t("p",[v._v("使用 CSS3 特性来实现动画效果。")])])])])}),[],!1,null,null,null);_.default=i.exports}}]);