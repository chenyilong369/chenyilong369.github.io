(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{373:function(s,t,a){"use strict";a.r(t);var e=a(41),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"flex"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex"}},[s._v("#")]),s._v(" flex")]),s._v(" "),a("p",[s._v("假设又这么一个 html 结构：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[s._v("<div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex"')]),s._v(">\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex1"')]),s._v(">Flex 1</div>\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex2"')]),s._v(">Flex 2</div>\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex3"')]),s._v(">Flex 3</div>\n</div>\n")])])]),a("p",[s._v("一个"),a("code",[s._v("div")]),s._v(" 容器包含了三个 "),a("code",[s._v("div")]),s._v(" 子元素，按照默认的布局方式进行排列。因为 "),a("code",[s._v("div")]),s._v(" 是块级元素，每个 "),a("code",[s._v("div")]),s._v(" 占了整个一行的空间：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex01.png"),alt:"flex01"}}),s._v(" "),a("p",[s._v("如果要开启容器的 flex 布局，只需要在 css 里边给 "),a("code",[s._v(".flex")]),s._v(" 设置 "),a("code",[s._v("display: flex")]),s._v(" 属性。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 100px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("可以看到里边的三个元素自动变成了一行，因为 flex 默认是按行进行排列的。")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex02.png"),alt:"flex02"}}),s._v(" "),a("h2",{attrs:{id:"对齐方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对齐方式"}},[s._v("#")]),s._v(" 对齐方式")]),s._v(" "),a("p",[s._v("Flex 布局有一个隐式的坐标空间，水平方向有一条主轴(main-axis)，垂直方向上有一条交叉轴(cross-axis)：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex03.png"),alt:"flex03"}}),s._v(" "),a("h3",{attrs:{id:"justify-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#justify-content"}},[s._v("#")]),s._v(" justify-content")]),s._v(" "),a("p",[s._v("控制主轴（即水平方向）对齐方式使用"),a("code",[s._v("justify-content")]),s._v("属性，它有下边几种对齐方式：")]),s._v(" "),a("h4",{attrs:{id:"flex-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-start"}},[s._v("#")]),s._v(" flex-start")]),s._v(" "),a("p",[a("code",[s._v("flex-start")]),s._v(" 是默认值，如果是从左到右的文字阅读习惯(LTR)，就是靠左对齐。因为默认的对齐方式，所以跟上边的例子没有什么区别：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex02.png"),alt:"flex02"}}),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("justify-content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex-start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("h4",{attrs:{id:"center"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#center"}},[s._v("#")]),s._v(" center")]),s._v(" "),a("p",[s._v("居中对齐，此时整个 flex 容器被居中到了页面中间：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex04.png"),alt:"flex04"}}),s._v(" "),a("h4",{attrs:{id:"flex-end"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-end"}},[s._v("#")]),s._v(" flex-end")]),s._v(" "),a("p",[s._v("靠右对齐：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex05.png"),alt:"flex05"}}),s._v(" "),a("h4",{attrs:{id:"space-between"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-between"}},[s._v("#")]),s._v(" space-between")]),s._v(" "),a("p",[s._v("两端对齐，这种对齐方式是第一个和最后一个元素贴边，中间的元素平分剩余的空间：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex06.png"),alt:"flex06"}}),s._v(" "),a("h4",{attrs:{id:"space-evenly"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-evenly"}},[s._v("#")]),s._v(" space-evenly")]),s._v(" "),a("p",[s._v("分散对齐，所有的元素都平分空间：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex07.png"),alt:"flex07"}}),s._v(" "),a("h4",{attrs:{id:"space-around"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-around"}},[s._v("#")]),s._v(" space-around")]),s._v(" "),a("p",[s._v("跟"),a("code",[s._v("space-evenly")]),s._v("类似，但是左右两边的留白为平分空间的 1/2.")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex08.png"),alt:"flex08"}}),s._v(" "),a("h3",{attrs:{id:"align-items"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-items"}},[s._v("#")]),s._v(" align-items")]),s._v(" "),a("p",[s._v("控制交叉轴方向（即垂直方向）上的对齐方式使用"),a("code",[s._v("align-items")]),s._v("属性，有下边几种对齐方式：")]),s._v(" "),a("h4",{attrs:{id:"stretch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stretch"}},[s._v("#")]),s._v(" stretch")]),s._v(" "),a("p",[a("code",[s._v("stretch")]),s._v(" 是 "),a("code",[s._v("align-items")]),s._v(" 的默认值，它会自动把子元素拉伸成容器的高度，所以之前的例子里子元素在垂直方向上都占满了容器，只要改变容器的"),a("code",[s._v("align-items")]),s._v("的值，它就会变成内容的高度。")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex02.png"),alt:"flex02"}}),s._v(" "),a("h4",{attrs:{id:"flex-start-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-start-2"}},[s._v("#")]),s._v(" flex-start")]),s._v(" "),a("p",[s._v("靠上对齐，在交叉轴开始的最上方，可以看到子元素不再占满容器宽度：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex09.png"),alt:"flex09"}}),s._v(" "),a("h4",{attrs:{id:"center-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#center-2"}},[s._v("#")]),s._v(" center")]),s._v(" "),a("p",[s._v("居中对齐：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex10.png"),alt:"flex10"}}),s._v(" "),a("h4",{attrs:{id:"flex-end-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-end-2"}},[s._v("#")]),s._v(" flex-end")]),s._v(" "),a("p",[s._v("靠下对齐：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex11.png"),alt:"flex11"}}),s._v(" "),a("h4",{attrs:{id:"baseline"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#baseline"}},[s._v("#")]),s._v(" baseline")]),s._v(" "),a("p",[s._v("基线对齐，如果子元素文字尺寸和行高不同，则子元素会按照文字的基线进行对齐：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex12.png"),alt:"flex12"}}),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("font-size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 24px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("如果是 "),a("code",[s._v("flex-start")]),s._v(" 对齐方式")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex13.png"),alt:"flex13"}}),s._v(" "),a("h2",{attrs:{id:"子元素覆盖对齐方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子元素覆盖对齐方式"}},[s._v("#")]),s._v(" 子元素覆盖对齐方式")]),s._v(" "),a("p",[s._v("子元素可以通过设置 "),a("code",[s._v("align-self")]),s._v(" 来控制自己在交叉轴上的对齐方式，")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("align-items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex-start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("align-self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex-end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex14.png"),alt:"flex14"}}),s._v(" "),a("p",[s._v("在水平方向上控制子元素对齐并没有"),a("code",[s._v("justify-self")]),s._v("属性，而是使用"),a("code",[s._v("margin")]),s._v("属性，通过把左或右边距设置为"),a("code",[s._v("auto")]),s._v("来控制水平对齐:")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("margin-left")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" auto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex15.png"),alt:"flex15"}}),s._v(" "),a("h2",{attrs:{id:"排列方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#排列方式"}},[s._v("#")]),s._v(" 排列方式")]),s._v(" "),a("p",[s._v("flex 支持按行排布，也支持按列排布。按列排布时，主轴和交叉轴换了方向，但是 align-items 和 justify-content 控制的轴线不变，即 "),a("code",[s._v("align-items")]),s._v(" 还是控制交叉轴，"),a("code",[s._v("justify-content")]),s._v(" 控制主轴：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex16.png"),alt:"flex16"}}),s._v(" "),a("p",[s._v("要使 flex 按列排布，只需要设置：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[a("strong",[s._v("水平居中对齐")])]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("align-items")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" center"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex17.png"),alt:"flex17"}}),s._v(" "),a("p",[a("strong",[s._v("垂直居中对齐")])]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("justify-content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" center"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex18.png"),alt:"flex18"}}),s._v(" "),a("p",[s._v("另外 flex 布局也可以支持反向按行和列布局，相当于按容器中心线进行 180 度翻转：")]),s._v(" "),a("p",[a("strong",[s._v("row-reverse")])]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" row-reverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex19.png"),alt:"flex19"}}),s._v(" "),a("p",[a("strong",[s._v("column-reverse")])]),s._v(" "),a("p",[s._v("列模式下会垂直翻转：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-direction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" column-reverse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex20.png"),alt:"flex20"}}),s._v(" "),a("h2",{attrs:{id:"空间占比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间占比"}},[s._v("#")]),s._v(" 空间占比")]),s._v(" "),a("p",[s._v("子元素可以通过设置"),a("code",[s._v("flex")]),s._v("属性来调整空间的占比，例如让 "),a("code",[s._v("flex2")]),s._v(" 在水平方向上占据其他子元素的 2 倍大小")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex1,\n.flex3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex21.png"),alt:"flex21"}}),s._v(" "),a("h2",{attrs:{id:"flex-basis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-basis"}},[s._v("#")]),s._v(" Flex-basis")]),s._v(" "),a("p",[s._v("在介绍 flex-basis 之前，先讲一个概念 "),a("code",[s._v("main size")]),s._v("，即主轴方向的尺寸，那么，在行排布模式下，也就是水平方向的尺寸，其实就是子元素的宽度，而在列模式下，它是子元素的高度，相对应的也有"),a("code",[s._v("cross size")]),s._v("，即行模式下是子元素的高度，列模式下是宽度。")]),s._v(" "),a("p",[s._v("而"),a("code",[s._v("flex-basis")]),s._v("是用来设置"),a("code",[s._v("main size")]),s._v("的，它的优先级会高于"),a("code",[s._v("width")]),s._v("。"),a("strong",[s._v("它的默认值是"),a("code",[s._v("auto")])]),s._v("，即在行模式下，如果子元素设置了宽度，它就取自这个宽度值，没有设置的话，就是内容的宽度。使用 "),a("code",[s._v("flex-basis")]),s._v("，可以同时管理行模式下的宽度和列模式下的高度。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex > *")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 200px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex22.png"),alt:"flex22"}}),s._v(" "),a("p",[s._v("如果再添加 "),a("code",[s._v("width")]),s._v(" 属性，发现并不会生效：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex > *")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 200px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 250px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex22.png"),alt:"flex22"}}),s._v(" "),a("p",[s._v("但是，可以通过设置 "),a("code",[s._v("min-width")]),s._v("来强制设置最小宽度：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex > *")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 200px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("min-width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 250px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("在列模式下同理")]),s._v(" "),a("h2",{attrs:{id:"缩放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缩放"}},[s._v("#")]),s._v(" 缩放")]),s._v(" "),a("h3",{attrs:{id:"flex-grow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-grow"}},[s._v("#")]),s._v(" flex-grow")]),s._v(" "),a("p",[s._v("先看一下增长，"),a("code",[s._v("flex-grow")]),s._v("，这个属性是说 flex 容器在有剩余空间的时候，子元素占据剩余空间的占比。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-grow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("其它的元素保持默认的宽度（即内容的宽度，flex-basis 为 auto)，那么 "),a("code",[s._v(".flex2")]),s._v(" 就会自动增长并占据整个剩余空间：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex24.png"),alt:"flex24"}}),s._v(" "),a("p",[s._v("如果把三个元素全部设置成 1，那么所有元素都会自动增长，并各自占据 1/3 的空间：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex25.png"),alt:"flex25"}}),s._v(" "),a("h3",{attrs:{id:"flex-shrink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-shrink"}},[s._v("#")]),s._v(" flex-shrink")]),s._v(" "),a("p",[s._v("子元素的收缩是说：当它们的宽度超过 flex 容器之后，该如何进行收缩。通过 "),a("code",[s._v("flex-shrink")]),s._v(" 来设置一个数值，数值越大，收缩程度也越大。比如"),a("code",[s._v("flex-shrink: 2")]),s._v("的元素会比"),a("code",[s._v("flex-shrink:1")]),s._v("收缩的值大 2 倍：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex1,\n.flex3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 600px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-shrink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 600px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-shrink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("把所有的 flex 子元素的 main size (宽度) 都设置成了 600px。在我的显示器下，flex 容器的宽度是 728px，三个子元素总和 1800px，显然超出了容器的宽度，那么根据上边定义的收缩规则，"),a("code",[s._v(".flex2")]),s._v(" 将收缩 2 倍于 "),a("code",[s._v(".flex")]),s._v(" 和 "),a("code",[s._v(".flex3")]),s._v(" 收缩的空间。下边的例子中，"),a("code",[s._v(".flex1")]),s._v(" 和 "),a("code",[s._v(".flex3")]),s._v(" 的宽度变成了 "),a("code",[s._v("332px")]),s._v("，相比于 "),a("code",[s._v("600px")]),s._v(" 收缩了 "),a("code",[s._v("268px")]),s._v("，那么 "),a("code",[s._v(".flex2")]),s._v(" 就要收缩 "),a("code",[s._v("536px (268px * 2)")]),s._v(" 的宽度，那么它最后就会剩下 "),a("code",[s._v("64px (600px - 536px)")]),s._v(" 的宽度：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex26.png"),alt:"flex26"}}),s._v(" "),a("h2",{attrs:{id:"flex-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flex-属性"}},[s._v("#")]),s._v(" flex 属性")]),s._v(" "),a("p",[s._v("它其实是前边三个属性("),a("code",[s._v("flex-grow")]),s._v("、"),a("code",[s._v("flex-shrink")]),s._v(" 和 "),a("code",[s._v("flex-basis")]),s._v(")的缩写，默认值是 "),a("code",[s._v("0 1 auto")]),s._v("，即不增长，但收缩，收缩比例为 1，flex-basis 为 auto，即取自用户定义的宽度或内容的宽度。")]),s._v(" "),a("p",[s._v("flex 的值可以是下边几种：")]),s._v(" "),a("ul",[a("li",[s._v("指定一个数字 - 例如"),a("code",[s._v("flex: 1")]),s._v("，就等同于是"),a("code",[s._v("flex: 1 1 0")]),s._v("，即自动缩放，比例为 1，flex-basis 为 0。")]),s._v(" "),a("li",[s._v("auto - 等同于"),a("code",[s._v("flex: 1 1 auto")]),s._v("。")]),s._v(" "),a("li",[s._v("指定两个数字 - 第一个为"),a("code",[s._v("flex-grow")]),s._v("，第二个，如果是数字则认为是 "),a("code",[s._v("flex-shrink")]),s._v("，如果是宽度，则是"),a("code",[s._v("flex-basis")]),s._v("。")]),s._v(" "),a("li",[s._v("指定三个值 - 分别为"),a("code",[s._v("flex-grow")]),s._v("，"),a("code",[s._v("flex-shrink")]),s._v(" 和 "),a("code",[s._v("flex-basis")]),s._v("。")])]),s._v(" "),a("p",[s._v("所以说，通过"),a("code",[s._v("flex")]),s._v("属性可以方便的同时设置"),a("code",[s._v("flex-grow")]),s._v("、"),a("code",[s._v("flex-shrink")]),s._v(" 和 "),a("code",[s._v("flex-basis")]),s._v(" 这三个值。")]),s._v(" "),a("h2",{attrs:{id:"折行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#折行"}},[s._v("#")]),s._v(" 折行")]),s._v(" "),a("p",[s._v("如果子元素有固定宽度，并且超出了容器的宽度，还不允许收缩的话，那么可以使用"),a("code",[s._v("flex-wrap")]),s._v("属性来让元素进行折行排列，使得每行的元素都不超过容器的宽度。")]),s._v(" "),a("p",[s._v("下边的示例新增了 2 个元素，一共 5 个，每个元素的 main size 为 300px，然后超出宽度后折行：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-wrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" wrap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex > *")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-shrink")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 300px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex27.png"),alt:"flex27"}}),s._v(" "),a("h3",{attrs:{id:"align-content"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#align-content"}},[s._v("#")]),s._v(" align-content")]),s._v(" "),a("p",[s._v("如果 flex 容器开启了折行，那么两行及以上的内容可以通过"),a("code",[s._v("align-content")]),s._v("属性来控制各行之间在交叉轴上的排列规则，它的取值和 "),a("code",[s._v("justify-content")]),s._v("基本相同，这里演示其中几个，还是使用之前三个元素的 flex 容器，每个容器宽度为 300px，超出后换行：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-wrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" wrap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex > *")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex-basis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 300px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h4",{attrs:{id:"center-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#center-3"}},[s._v("#")]),s._v(" center")]),s._v(" "),a("p",[s._v("垂直居中：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex28.png"),alt:"flex28"}}),s._v(" "),a("h4",{attrs:{id:"space-between-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#space-between-2"}},[s._v("#")]),s._v(" space-between")]),s._v(" "),a("p",[s._v("两端对齐：")]),s._v(" "),a("img",{attrs:{src:s.$withBase("/flex/flex29.png"),alt:"flex29"}}),s._v(" "),a("h2",{attrs:{id:"嵌套的-flex-容器的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套的-flex-容器的问题"}},[s._v("#")]),s._v(" 嵌套的 flex 容器的问题")]),s._v(" "),a("p",[s._v("如果 HTML 结构复杂，有嵌套的 flex 容器，很有可能会遇到嵌套的 flex 容器并不能自动收缩的问题。")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[s._v("<div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex"')]),s._v(">\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex1"')]),s._v(">Flex 1</div>\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex2"')]),s._v(">Flex 2</div>\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex3"')]),s._v(">Flex 3</div>\n  <div class="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"flex4"')]),s._v(">\n    <p>\n      这是一段很长很长很长很长很长很长很长很长很长很长很长很长长很长很长很长很长很长长很长很长很长很长很长的文本\n    </p>\n  </div>\n</div>\n")])])]),a("p",[s._v("由于"),a("code",[s._v("flex4")]),s._v("是一段很长的代码，想让它超长之后自动显示省略号")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex > *")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex4 > p")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("white-space")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" nowrap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("overflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("text-overflow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ellipsis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex30.png"),alt:"flex30"}}),s._v(" "),a("p",[s._v("可以看到，最后本应该占 1/4 空间的"),a("code",[s._v(".flex4")]),s._v("，因为文本不能换行，直接把 flex 容器撑开了，并且把其他的三个子元素挤成了最小空间，它本应该把文字截短并显示省略号，这是为什么呢？原来，flex 容器的 "),a("code",[s._v("min-width")]),s._v(" 属性值为 auto，是由浏览器自行计算的，在这里它取了"),a("code",[s._v("<p>")]),s._v("元素的宽度，使得宽度成为了一整行 "),a("code",[s._v("<p>")]),s._v(" 的宽度。那么要解决这个问题，可以把"),a("code",[s._v(".flex4")]),s._v(" 这个嵌套 flex 容器的 "),a("code",[s._v("min-width")]),s._v(" 改为"),a("code",[s._v("0")]),s._v("，即最小宽度是"),a("code",[s._v("0")]),s._v("，那么就可以正常收缩了：")]),s._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".flex4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("display")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" flex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("flex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("min-width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("img",{attrs:{src:s.$withBase("/flex/flex31.png"),alt:"flex31"}})])}),[],!1,null,null,null);t.default=n.exports}}]);