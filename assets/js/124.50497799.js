(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{483:function(t,a,s){"use strict";s.r(a);var e=s(41),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"csrf-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-攻击"}},[t._v("#")]),t._v(" CSRF 攻击")]),t._v(" "),s("p",[t._v("首先看一个案例，假设一个叫 David 的人登录了他的邮箱，并点击了其中一个邮件里面的链接，然后他的域名就被盗了。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/CSRF01.png"),alt:"CSRF01"}}),t._v(" "),s("ul",[s("li",[t._v("首先 David 发起登录 Gmail 邮箱请求，然后 Gmail 服务器返回一些登录状态给 David 的浏览器，这些信息包括了 Cookie、Session 等，这样在 David 的浏览器中，Gmail 邮箱就处于登录状态了。")]),t._v(" "),s("li",[t._v("接着黑客通过各种手段引诱 David 去打开他的链接，比如 hacker.com，然后在 hacker.com 页面中，黑客编写好了一个邮件过滤器，并通过 Gmail 提供的 HTTP 设置接口设置好了新的邮件过滤功能，该过滤器会将 David 所有的邮件都转发到黑客的邮箱中。")]),t._v(" "),s("li",[t._v("有了 David 的邮件内容，所以黑客就可以去域名服务商那边重置 David 域名账户的密码，重置好密码之后，就可以将其转出到黑客的账户了。")])]),t._v(" "),s("p",[t._v("另外一个典型的CSRF攻击有着如下的流程：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"http://xn--a-f38al5vkzdt61bv7l.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("受害者登录a.com"),s("OutboundLink")],1),t._v("，并保留了登录凭证（Cookie）。")]),t._v(" "),s("li",[s("a",{attrs:{href:"http://xn--b-nv6ao4io8bp6po6e00mu47cda4311avpa330h.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("攻击者引诱受害者访问了b.com"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("li",[s("a",{attrs:{href:"http://b.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("b.com"),s("OutboundLink")],1),t._v(" 向 "),s("a",{attrs:{href:"http://a.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("a.com"),s("OutboundLink")],1),t._v(" 发送了一个请求："),s("a",{attrs:{href:"http://a.com/act=xx%E3%80%82%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E9%BB%98%E8%AE%A4%E6%90%BA%E5%B8%A6a.com%E7%9A%84Cookie%E3%80%82",target:"_blank",rel:"noopener noreferrer"}},[t._v("a.com/act=xx。浏览器会…"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),t._v(" "),s("li",[t._v("a.com以受害者的名义执行了act=xx。")]),t._v(" "),s("li",[t._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。")])]),t._v(" "),s("h2",{attrs:{id:"什么是-csrf-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-csrf-攻击"}},[t._v("#")]),t._v(" 什么是 CSRF 攻击")]),t._v(" "),s("p",[t._v("CSRF 英文全称是 Cross-site request forgery，所以又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站，在黑客的网站中，利用用户的登录状态发起的跨站请求。简单来讲，"),s("strong",[t._v("CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事。")])]),t._v(" "),s("p",[t._v("有三种攻击方式：")]),t._v(" "),s("h3",{attrs:{id:"自动发起-get-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动发起-get-请求"}},[t._v("#")]),t._v(" 自动发起 Get 请求")]),t._v(" "),s("p",[t._v("黑客最容易实施的攻击方式是自动发起 Get 请求。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://www.baidu.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("当该页面被加载时，浏览器会自动发起 img 的资源请求，如果服务器没有对该请求做判断的话，那么服务器就会认为该请求是一个其他请求。黑客的目的可能就达到了。")]),t._v(" "),s("h3",{attrs:{id:"自动发起-post-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动发起-post-请求"}},[t._v("#")]),t._v(" 自动发起 POST 请求")]),t._v(" "),s("p",[t._v("有些服务器的接口是使用 POST 方法的，所以黑客还需要在他的站点上伪造 POST 请求，当用户打开黑客的站点时，是自动提交 POST 请求。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("form")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("hacker-form"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("action")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://www.baidu.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("method")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("POST")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hacker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hidden"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("100"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("form")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}},[s("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hacker-form'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("submit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" ")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" // 自动提交\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("当用户打开该站点之后，这个表单会被自动执行提交；当表单被提交之后，服务器就会执行转账操作。因此使用构建自动提交表单这种方式，就可以自动实现跨站点 POST 数据提交。")]),t._v(" "),s("h3",{attrs:{id:"引诱用户点击链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引诱用户点击链接"}},[t._v("#")]),t._v(" 引诱用户点击链接")]),t._v(" "),s("p",[t._v("还有一种方式是诱惑用户点击黑客站点上的链接，这种方式通常出现在论坛或者恶意邮件上。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://www.baidu.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("taget")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("_blank"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    点击下载美女照片\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[s("strong",[t._v("和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。")])]),t._v(" "),s("h3",{attrs:{id:"csrf的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf的特点"}},[t._v("#")]),t._v(" CSRF的特点")]),t._v(" "),s("ul",[s("li",[t._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),t._v(" "),s("li",[t._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。")]),t._v(" "),s("li",[t._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。")]),t._v(" "),s("li",[t._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")]),t._v(" "),s("li",[t._v("CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。")])]),t._v(" "),s("h2",{attrs:{id:"预防-csrf-攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预防-csrf-攻击"}},[t._v("#")]),t._v(" 预防 CSRF 攻击")]),t._v(" "),s("h3",{attrs:{id:"cookie-的-samesite-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的-samesite-属性"}},[t._v("#")]),t._v(" Cookie 的 SameSite 属性")]),t._v(" "),s("p",[t._v("黑客会利用用户的登录状态来发起 CSRF 攻击，而 Cookie 正是浏览器和服务器之间维护登录状态的一个关键数据，因此要阻止 CSRF 攻击，我们可以考虑在 Cookie 上来做文章。")]),t._v(" "),s("p",[t._v("SameSite 选项通常有 Strict、Lax 和 None 三个值。")]),t._v(" "),s("ul",[s("li",[t._v("Strict 最为严格。如果 SameSite 的值是 Strict，那么浏览器会完全禁止第三方 Cookie。")]),t._v(" "),s("li",[t._v("Lax 相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交 Get 方式的表单这两种方式都会携带 Cookie。")]),t._v(" "),s("li",[t._v("而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。")])]),t._v(" "),s("h3",{attrs:{id:"验证请求的来源站点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证请求的来源站点"}},[t._v("#")]),t._v(" 验证请求的来源站点")]),t._v(" "),s("p",[t._v("由于 CSRF 攻击大多来自于第三方站点，因此服务器可以禁止来自第三方站点的请求。那么该怎么判断请求是否来自第三方站点呢？")]),t._v(" "),s("p",[s("strong",[t._v("Referer")]),t._v(" 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址。")]),t._v(" "),s("p",[t._v("虽然可以通过 Referer 告诉服务器 HTTP 请求的来源，但是有一些场景是不适合将来源 URL 暴露给服务器的，因此浏览器提供给开发者一个选项，可以不用上传 Referer 值。")]),t._v(" "),s("p",[s("strong",[t._v("Origin")]),t._v(" 属性只包含了域名信息，并没有包含具体的 URL 路径，这是 Origin 和 Referer 的一个主要区别。")]),t._v(" "),s("p",[t._v("服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际情况判断是否使用 Referer 值。")]),t._v(" "),s("h3",{attrs:{id:"csrf-token"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-token"}},[t._v("#")]),t._v(" CSRF Token")]),t._v(" "),s("p",[t._v("在浏览器向服务器发起请求时，服务器生成一个 CSRF Token。CSRF Token 其实就是服务器生成的字符串，然后将该字符串植入到返回的页面中。")]),t._v(" "),s("p",[t._v("在浏览器端如果要发起请求，那么需要带上页面中的 CSRF Token，然后服务器会验证该 Token 是否合法。如果是从第三方站点发出的请求，那么将无法获取到 CSRF Token 的值，所以即使发出了请求，服务器也会因为 CSRF Token 不正确而拒绝请求。")]),t._v(" "),s("p",[t._v("CSRF Token的防护策略分为三个步骤：")]),t._v(" "),s("p",[t._v("1.将CSRF Token输出到页面中")]),t._v(" "),s("p",[t._v("首先，用户打开页面的时候，服务器需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合，显然在提交时Token不能再放在Cookie中了，否则又会被攻击者冒用。因此，为了安全起见Token最好还是存在服务器的Session中，之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。")]),t._v(" "),s("p",[t._v("2.页面提交的请求携带这个Token")]),t._v(" "),s("p",[t._v("对于GET请求，Token将附在请求地址之后，这样URL 就变成 http://url?csrftoken=tokenvalue。 而对于 POST 请求来说，要在 form 的最后加上：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("”hidden”")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("”csrftoken”")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("value")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("”tokenvalue”/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("这样，就把Token以参数的形式加入请求了。")]),t._v(" "),s("p",[t._v("3.服务器验证Token是否正确")]),t._v(" "),s("p",[t._v("当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个Token就是有效的。")]),t._v(" "),s("p",[t._v("这种方法要比之前检查Referer或者Origin要安全一些，Token可以在产生并放于Session之中，然后在每次请求时把Token从Session中拿出，与请求中的Token进行比对。")]),t._v(" "),s("h3",{attrs:{id:"分布式校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式校验"}},[t._v("#")]),t._v(" 分布式校验")]),t._v(" "),s("p",[t._v("在大型网站中，使用Session存储CSRF Token会带来很大的压力。访问单台服务器session是同一个。但是现在的大型网站中，我们的服务器通常不止一台，可能是几十台甚至几百台之多，甚至多个机房都可能在不同的省份，用户发起的HTTP请求通常要经过像Ngnix之类的负载均衡器之后，再路由到具体的服务器上，由于Session默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次HTTP请求可能会先后落到不同的服务器上，导致后面发起的HTTP请求无法拿到之前的HTTP请求存储在服务器中的Session数据，从而使得Session机制在分布式环境下失效，因此在分布式集群中CSRF Token需要存储在Redis之类的公共存储空间。")]),t._v(" "),s("p",[t._v("由于使用Session存储，读取和验证CSRF Token会引起比较大的复杂度和性能问题，目前很多网站采用Encrypted Token Pattern方式。这种方法的Token是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的Token，只用再次计算一次即可。")]),t._v(" "),s("p",[t._v("这种Token的值通常是使用UserID、时间戳和随机数，通过加密的方法生成。这样既可以保证分布式服务的Token一致，又能保证Token不容易被破解。")]),t._v(" "),s("p",[t._v("在token解密成功之后，服务器可以访问解析值，Token中包含的UserID和时间戳将会被拿来被验证有效性，将UserID与当前登录的UserID进行比较，并将时间戳与当前时间进行比较。")]),t._v(" "),s("h3",{attrs:{id:"双重cookie验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双重cookie验证"}},[t._v("#")]),t._v(" 双重Cookie验证")]),t._v(" "),s("p",[t._v("在会话中存储CSRF Token比较繁琐，而且不能在通用的拦截上统一处理所有的接口。")]),t._v(" "),s("p",[t._v("那么另一种防御措施是使用双重提交Cookie。利用CSRF攻击不能获取到用户Cookie的特点，我们可以要求Ajax和表单请求携带一个Cookie中的值。")]),t._v(" "),s("p",[t._v("双重Cookie采用以下流程：")]),t._v(" "),s("ul",[s("li",[t._v("在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串（例如"),s("code",[t._v("csrfcookie=v8g9e4ksfhw")]),t._v("）。")]),t._v(" "),s("li",[t._v("在前端向后端发起请求时，取出Cookie，并添加到URL的参数中（接上例"),s("code",[t._v("POST https://www.a.com/comment?csrfcookie=v8g9e4ksfhw")]),t._v("）。")]),t._v(" "),s("li",[t._v("后端接口验证Cookie中的字段与URL参数中的字段是否一致，不一致则拒绝。")])]),t._v(" "),s("p",[t._v("此方法相对于CSRF Token就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储Token。")]),t._v(" "),s("p",[t._v("当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有CSRF Token高，原因我们举例进行说明。")]),t._v(" "),s("p",[t._v("由于任何跨域都会导致前端无法获取Cookie中的字段（包括子域名之间），于是发生了如下情况：")]),t._v(" "),s("ul",[s("li",[t._v("如果用户访问的网站为"),s("code",[t._v("www.a.com")]),t._v("，而后端的api域名为"),s("code",[t._v("api.a.com")]),t._v("。那么在"),s("code",[t._v("www.a.com")]),t._v("下，前端拿不到"),s("code",[t._v("api.a.com")]),t._v("的Cookie，也就无法完成双重Cookie认证。")]),t._v(" "),s("li",[t._v("于是这个认证Cookie必须被种在"),s("code",[t._v("a.com")]),t._v("下，这样每个子域都可以访问。")]),t._v(" "),s("li",[t._v("任何一个子域都可以修改"),s("code",[t._v("a.com")]),t._v("下的Cookie。")]),t._v(" "),s("li",[t._v("某个子域名存在漏洞被XSS攻击（例如"),s("code",[t._v("upload.a.com")]),t._v("）。虽然这个子域下并没有什么值得窃取的信息。但攻击者修改了"),s("code",[t._v("a.com")]),t._v("下的Cookie。")]),t._v(" "),s("li",[t._v("攻击者可以直接使用自己配置的Cookie，对XSS中招的用户再向"),s("code",[t._v("www.a.com")]),t._v("下，发起CSRF攻击。")])]),t._v(" "),s("h2",{attrs:{id:"对自己网站的防护"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对自己网站的防护"}},[t._v("#")]),t._v(" 对自己网站的防护")]),t._v(" "),s("ul",[s("li",[t._v("严格管理所有的上传接口，防止任何预期之外的上传内容（例如HTML）。")]),t._v(" "),s("li",[t._v("添加Header "),s("code",[t._v("X-Content-Type-Options: nosniff")]),t._v(" 防止黑客上传HTML内容的资源（例如图片）被解析为网页。")]),t._v(" "),s("li",[t._v("对于用户上传的图片，进行转存或者校验。不要直接使用用户填写的图片链接。")]),t._v(" "),s("li",[t._v("当前用户打开其他用户填写的链接时，需告知风险（这也是很多论坛不允许直接在内容中发布外域链接的原因之一，不仅仅是为了用户留存，也有安全考虑）。")])]),t._v(" "),s("h2",{attrs:{id:"csrf其他防范措施"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf其他防范措施"}},[t._v("#")]),t._v(" CSRF其他防范措施")]),t._v(" "),s("p",[t._v("对于一线的程序员同学，我们可以通过各种防护策略来防御CSRF，对于QA、SRE、安全负责人等同学，我们可以做哪些事情来提升安全性呢？")]),t._v(" "),s("h3",{attrs:{id:"csrf测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf测试"}},[t._v("#")]),t._v(" CSRF测试")]),t._v(" "),s("p",[t._v("CSRFTester是一款CSRF漏洞的测试工具，CSRFTester工具的测试原理大概是这样的，使用代理抓取我们在浏览器中访问过的所有的连接以及所有的表单等信息，通过在CSRFTester中修改相应的表单等信息，重新提交，相当于一次伪造客户端请求，如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。 CSRFTester使用方法大致分下面几个步骤：")]),t._v(" "),s("ul",[s("li",[t._v("步骤1：设置浏览器代理")])]),t._v(" "),s("p",[t._v("CSRFTester默认使用Localhost上的端口8008作为其代理，如果代理配置成功，CSRFTester将为您的浏览器生成的所有后续HTTP请求生成调试消息。")]),t._v(" "),s("ul",[s("li",[t._v("步骤2：使用合法账户访问网站开始测试")])]),t._v(" "),s("p",[t._v("我们需要找到一个我们想要为CSRF测试的特定业务Web页面。找到此页面后，选择CSRFTester中的“开始录制”按钮并执行业务功能；完成后，点击CSRFTester中的“停止录制”按钮；正常情况下，该软件会全部遍历一遍当前页面的所有请求。")]),t._v(" "),s("ul",[s("li",[t._v("步骤3：通过CSRF修改并伪造请求")])]),t._v(" "),s("p",[t._v("之后，我们会发现软件上有一系列跑出来的记录请求，这些都是我们的浏览器在执行业务功能时生成的所有GET或者POST请求。通过选择列表中的某一行，我们现在可以修改用于执行业务功能的参数，可以通过点击对应的请求修改query和form的参数。当修改完所有我们希望诱导用户form最终的提交值，可以选择开始生成HTML报告。")]),t._v(" "),s("ul",[s("li",[t._v("步骤4：拿到结果如有漏洞进行修复")])]),t._v(" "),s("p",[t._v("首先必须选择“报告类型”。报告类型决定了我们希望受害者浏览器如何提交先前记录的请求。目前有5种可能的报告：表单、iFrame、IMG、XHR和链接。一旦选择了报告类型，我们可以选择在浏览器中启动新生成的报告，最后根据报告的情况进行对应的排查和修复。")]),t._v(" "),s("h3",{attrs:{id:"csrf监控"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf监控"}},[t._v("#")]),t._v(" CSRF监控")]),t._v(" "),s("p",[t._v("对于一个比较复杂的网站系统，某些项目、页面、接口漏掉了CSRF防护措施是很可能的。")]),t._v(" "),s("p",[t._v("一旦发生了CSRF攻击，我们如何及时的发现这些攻击呢？")]),t._v(" "),s("p",[t._v("CSRF攻击有着比较明显的特征：")]),t._v(" "),s("ul",[s("li",[t._v("跨域请求。")]),t._v(" "),s("li",[t._v("GET类型请求Header的MIME类型大概率为图片，而实际返回Header的MIME类型为Text、JSON、HTML。")])]),t._v(" "),s("p",[t._v("我们可以在网站的代理层监控所有的接口请求，如果请求符合上面的特征，就可以认为请求有CSRF攻击嫌疑。我们可以提醒对应的页面和项目负责人，检查或者 Review其CSRF防护策略。")])])}),[],!1,null,null,null);a.default=n.exports}}]);