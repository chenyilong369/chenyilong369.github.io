(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{489:function(t,s,a){"use strict";a.r(s);var n=a(41),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),a("p",[t._v("为了理解事件循环，先从最简单的场景做一次分析。")]),t._v(" "),a("h2",{attrs:{id:"事件循环-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环-2"}},[t._v("#")]),t._v(" 事件循环")]),t._v(" "),a("p",[t._v("假设有以下任务：")]),t._v(" "),a("ul",[a("li",[t._v("计算 55 + 41")]),t._v(" "),a("li",[t._v("计算 20 / 4")]),t._v(" "),a("li",[t._v("计算 8 * 7")]),t._v(" "),a("li",[t._v("打印出前面 3 个任务的值")])]),t._v(" "),a("p",[t._v("我这里用 c++ 来描述以上任务。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MainThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("55")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("41")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务1")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务2")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务3")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最终计算的值为:%d,%d,%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("； "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//任务4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但是这样写就太缺乏灵活性了，假设我要在任务 1，任务 2 之间插入一个任务是无法处理的。")]),t._v(" "),a("p",[t._v("并不是所有的任务都是在执行之前统一安排好的，大部分情况下，新的任务是在线程运行过程中产生的。要想在线程运行过程中，能接收并执行新的任务，就需要采用事件循环机制。")]),t._v(" "),a("p",[t._v("那么我们对上面的写法做个改进：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" input_number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"请输入一个数:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    cin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("input_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" input_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MainThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" first_num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" second_num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n          result_num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" first_num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" second_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最终计算的值为:%d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("result_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面的代码做了两点改进：")]),t._v(" "),a("ul",[a("li",[t._v("引入了循环机制")]),t._v(" "),a("li",[t._v("引入了事件")])]),t._v(" "),a("img",{attrs:{src:t.$withBase("/internet01.png"),alt:"internet01"}}),t._v(" "),a("p",[t._v("不过上面的任务都只是来自线程的内部，如果另一个线程想让主线程执行一个任务，上面的代码是做不到的。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/internet02.png"),alt:"internet02"}}),t._v(" "),a("p",[t._v("如何设计好一个线程模型，能让其能够接收其他线程发送的消息呢？")]),t._v(" "),a("p",[t._v("一个通用模式是使用"),a("strong",[t._v("消息队列")]),t._v("。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/internet03.png"),alt:"internet03"}}),t._v(" "),a("p",[t._v("消息队列是一种数据结构，可以存放要执行的任务。它符合队列“先进先出”的特点，也就是说要添加任务的话，添加到队列的尾部；要取出任务的话，从队列头部去取。")]),t._v(" "),a("p",[t._v("在引入消息队列后，来改造前面的线程模型。")]),t._v(" "),a("p",[t._v("改造分为 3 步")]),t._v(" "),a("ul",[a("li",[t._v("添加一个消息队列；")]),t._v(" "),a("li",[t._v("IO 线程中产生的新任务添加进消息队列尾部；")]),t._v(" "),a("li",[t._v("渲染主线程会循环地从消息队列头部中读取任务，执行任务。")])]),t._v(" "),a("p",[t._v("那么我们继续尝试用代码来展现上述模型：")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaskQueue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n  Task "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取出队列头部的一个任务")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Task task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加一个任务到队列尾部")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nTaskQueue task_queue；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MainThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 主线程从队列中读取任务")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Task task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" task_queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取任务")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行任务")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("img",{attrs:{src:t.$withBase("/internet04.png"),alt:"internet04"}}),t._v(" "),a("p",[t._v("由于是多个线程操作同一个消息队列，所以在添加任务和取出任务时还会加上一个同步锁。这方面就不再代码上体现了。")]),t._v(" "),a("p",[t._v("现在线程中的通信已经解决，那么进程中的通信该怎么解决呢。")]),t._v(" "),a("p",[t._v("渲染进程专门有一个 IO 线程用来接收其他进程传进来的消息，接收到消息之后，会将这些消息组装成任务发送给渲染主线程。")]),t._v(" "),a("p",[t._v("还有一个延迟队列，它专门处理诸如setTimeout/setInterval这样的定时器回调任务。")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/internet05.png"),alt:"internet05"}}),t._v(" "),a("p",[t._v("当页面主线程执行完成之后，又该如何保证页面主线程能够安全退出呢？")]),t._v(" "),a("p",[t._v("Chrome 是这样解决的，确定要退出当前页面时，页面主线程会设置一个退出标志的变量，在每次执行完一个任务时，判断是否有设置退出标志。如果设置了，那么就直接中断当前的所有任务，退出线程。")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("TaskQueue task_queue；\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),t._v(" keep_running "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MainThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Task task "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" task_queue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProcessTask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("keep_running"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果设置了退出标志，那么直接退出线程循环")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("总结一下事件循环：")]),t._v(" "),a("ol",[a("li",[t._v("一开始整段脚本作为第一个"),a("strong",[t._v("宏任务")]),t._v("执行")]),t._v(" "),a("li",[t._v("执行过程中同步代码直接执行，"),a("strong",[t._v("宏任务")]),t._v("进入宏任务队列，"),a("strong",[t._v("微任务")]),t._v("进入微任务队列")]),t._v(" "),a("li",[t._v("当前宏任务执行完出队，检查微任务队列，如果有则依次执行，直到微任务队列为空")]),t._v(" "),a("li",[t._v("执行浏览器 UI 线程的渲染工作")]),t._v(" "),a("li",[t._v("检查是否有Web worker任务，有则执行")]),t._v(" "),a("li",[t._v("执行队首新的宏任务，回到2，依此循环，直到宏任务和微任务队列都为空")])]),t._v(" "),a("p",[t._v("在优先级方面：")]),t._v(" "),a("ul",[a("li",[t._v("setTimeout = setInterval 一个队列")]),t._v(" "),a("li",[t._v("setTimeout > setImmediate")]),t._v(" "),a("li",[t._v("process.nextTick > Promise")])]),t._v(" "),a("h2",{attrs:{id:"单线程的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程的缺点"}},[t._v("#")]),t._v(" 单线程的缺点")]),t._v(" "),a("p",[t._v("上面讲述过页面线程所有执行的任务都来自于消息队列。消息队列是“先进先出”的属性，也就是说放入队列中的任务，需要等待前面的任务被执行完，才会被执行。")]),t._v(" "),a("p",[t._v("那么就会存在两个问题：")]),t._v(" "),a("h3",{attrs:{id:"如何处理高优先级的任务。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何处理高优先级的任务。"}},[t._v("#")]),t._v(" 如何处理高优先级的任务。")]),t._v(" "),a("p",[t._v("看一个比较典型的场景。")]),t._v(" "),a("p",[t._v("我们项目有个需求是监控 DOM 节点的变化，然后根据这些变化执行不同的功能。最简单的方法就是观察者模式，利用 JS 设计一套监听接口，当变化发生后，渲染引擎会调用这些接口。")]),t._v(" "),a("p",[t._v("那么，假设 DOM 的变化十分频繁，如果每次发生变化的时候，都直接调用相应的 JavaScript 接口，那么这个当前的任务执行时间会被拉长，从而导致执行效率的下降。")]),t._v(" "),a("p",[t._v("如果将这些 DOM 变化做成异步的消息事件，添加到消息队列的尾部，那么又会影响到监控的实时性，因为在添加到消息队列的过程中，可能前面就有很多任务在排队了。")]),t._v(" "),a("p",[t._v("什么东西能够解决上述的问题呢，微任务。")]),t._v(" "),a("p",[t._v("我们把消息队列中的任务称为"),a("code",[t._v("宏任务")]),t._v("，每个宏任务中都包含了一个"),a("code",[t._v("微任务队列")]),t._v("，在执行宏任务的过程中，如果 DOM 有变化，那么就会将该变化添加到微任务列表中，这样就不会影响到宏任务的继续执行，因此也就解决了执行效率的问题。")]),t._v(" "),a("p",[t._v("等宏任务中的主要功能都直接完成之后，渲染引擎执行当前宏任务中的微任务，因为 DOM 变化的事件都保存在这些微任务队列中，这样也就解决了实时性问题。")]),t._v(" "),a("h3",{attrs:{id:"如何解决单个任务执行时长过久的问题。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决单个任务执行时长过久的问题。"}},[t._v("#")]),t._v(" 如何解决单个任务执行时长过久的问题。")]),t._v(" "),a("p",[t._v("所有的任务都是在单线程中执行的，每次只能执行一个任务，而其他任务就都处于等待状态。如果其中一个任务执行时间过久，那么下一个任务就要等待很长时间。")]),t._v(" "),a("p",[t._v("JS 可以通过回调功能来规避这种问题，也就是让要执行的 JS 任务滞后执行。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("如果有一些确定好的任务，可以使用一个单线程来按照顺序处理这些任务。")]),t._v(" "),a("li",[t._v("要在线程执行过程中接收并处理新的任务，就需要引入循环语句和事件系统。")]),t._v(" "),a("li",[t._v("如果要接收其他线程发送过来的任务，就需要引入消息队列。")]),t._v(" "),a("li",[t._v("如果其他进程想要发送任务给页面主线程，那么先通过 IPC 把任务发送给渲染进程的 IO 线程，IO 线程再把任务发送给页面主线程。")]),t._v(" "),a("li",[t._v("消息队列机制并不是太灵活，为了适应效率和实时性，引入了微任务。")])]),t._v(" "),a("h2",{attrs:{id:"一些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些问题"}},[t._v("#")]),t._v(" 一些问题")]),t._v(" "),a("h3",{attrs:{id:"settimeout-fn-0-多久才执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settimeout-fn-0-多久才执行"}},[t._v("#")]),t._v(" "),a("code",[t._v("setTimeout(fn, 0)")]),t._v("多久才执行")]),t._v(" "),a("p",[t._v("setTimeout 按照顺序放到队列里面，然后等待函数调用栈清空之后才开始执行，而这些操作进入队列的顺序，则由设定的延迟时间来决定。")]),t._v(" "),a("h3",{attrs:{id:"下面输出是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下面输出是什么"}},[t._v("#")]),t._v(" 下面输出是什么")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'start'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'timeout'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nPromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'resolve'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("答案就是:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("start\nend\nresolve\ntimeout\n")])])]),a("p",[t._v("下面进行一次分析：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("刚开始整个脚本作为一个宏任务来执行，对于同步代码直接压入执行栈进行执行，因此"),a("strong",[t._v("先打印start和end")])])]),t._v(" "),a("li",[a("p",[t._v("setTimeout 作为一个宏任务放入宏任务队列")])]),t._v(" "),a("li",[a("p",[t._v("Promise.then作为一个为微任务放入到微任务队列")])]),t._v(" "),a("li",[a("p",[t._v("当本次宏任务执行完，检查微任务队列，发现一个Promise.then, "),a("strong",[t._v("执行")])])]),t._v(" "),a("li",[a("p",[t._v("接下来进入到下一个宏任务——setTimeout, "),a("strong",[t._v("执行")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);