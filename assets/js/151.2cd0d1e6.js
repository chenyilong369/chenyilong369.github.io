(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{509:function(v,_,a){"use strict";a.r(_);var t=a(41),e=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"操作系统内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统内核"}},[v._v("#")]),v._v(" 操作系统内核")]),v._v(" "),a("p",[v._v("内核是操作系统中应用连接硬件设备的桥梁。")]),v._v(" "),a("p",[v._v("对于一个现代的操作系统来说，它的内核至少应该提供以下 4 种基本能力：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("管理进程、线程（决定哪个进程、线程使用 CPU）；")])]),v._v(" "),a("li",[a("p",[v._v("管理内存（决定内存用来做什么）；")])]),v._v(" "),a("li",[a("p",[v._v("连接硬件设备（为进程、和设备间提供通信能力）；")])]),v._v(" "),a("li",[a("p",[v._v("提供系统调用（接收进程发送来的系统调用）。")])])]),v._v(" "),a("p",[v._v("从上面 4 种能力来看操作系统和内核之间的关系，通常可以把操作系统分成 3 层，最底层的硬件设备抽象、中间的内核和最上层的应用。")]),v._v(" "),a("h2",{attrs:{id:"内核工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核工作原理"}},[v._v("#")]),v._v(" 内核工作原理")]),v._v(" "),a("p",[v._v("内核权限非常高，它可以管理进程、可以直接访问所有的内存，因此需要和进程之间有一定的隔离。这个隔离用类似请求/响应的模型。")]),v._v(" "),a("p",[v._v("但不同的是在浏览器、服务端模型中，浏览器和服务端是用不同的机器在执行，因此不需要共享一个 CPU。但是在进程调用内核的过程中，这里是存在资源共享的。")]),v._v(" "),a("p",[v._v("大多数操作系统的设计都遵循一个原则：进程向内核发起一个请求，然后将 CPU 执行权限让出给内核。内核接手 CPU 执行权限，然后完成请求，再转让出 CPU 执行权限给调用进程。")]),v._v(" "),a("h2",{attrs:{id:"linux-的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-的设计"}},[v._v("#")]),v._v(" Linux 的设计")]),v._v(" "),a("p",[v._v("Linux 操作系统第一版是1991 年林纳斯托·瓦兹（一个芬兰的大佬，当时 22 岁）用 C 语音写的。")]),v._v(" "),a("p",[v._v("下面稍微谈论一下 Linux 的内核设计：")]),v._v(" "),a("h3",{attrs:{id:"multitask-and-smp-symmetric-multiprocessing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multitask-and-smp-symmetric-multiprocessing"}},[v._v("#")]),v._v(" Multitask and SMP（Symmetric multiprocessing）")]),v._v(" "),a("p",[v._v("MultiTask 指多任务，Linux 是一个多任务的操作系统。多任务就是多个任务可以同时执行，这里的“同时”并不是要求并发，而是在一段时间内可以执行多个任务。当然 Linux 支持并发。")]),v._v(" "),a("p",[v._v("SMP 指对称多处理。其实是说 Linux 下每个处理器的地位是相等的，内存对多个处理器来说是共享的，每个处理器都可以访问完整的内存和硬件资源。 这个特点决定了在 Linux 上不会存在一个特定的处理器处理用户程序或者内核程序，它们可以被分配到任何一个处理器上执行。")]),v._v(" "),a("h3",{attrs:{id:"elf-executable-and-linkable-format"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#elf-executable-and-linkable-format"}},[v._v("#")]),v._v(" ELF（Executable and Linkable Format）")]),v._v(" "),a("p",[v._v("这个名词翻译过来叫作可执行文件链接格式。这是一种从 Unix 继承而来的可执行文件的存储格式。 ELF 把文件分成了一个个分段（Segment），每个段都有自己的作用。")]),v._v(" "),a("h3",{attrs:{id:"monolithic-kernel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monolithic-kernel"}},[v._v("#")]),v._v(" Monolithic Kernel")]),v._v(" "),a("p",[v._v("这个名词翻译过来就是宏内核，宏内核反义词就是 Microkernel ，微内核的意思。")]),v._v(" "),a("p",[v._v("Linux 是宏内核架构，这说明 Linux 的内核是一个完整的可执行程序，且内核用最高权限来运行。")]),v._v(" "),a("p",[v._v("宏内核的特点就是有很多程序会打包在内核中，比如，文件系统、驱动、内存管理等。")]),v._v(" "),a("p",[v._v("微内核只保留最基本的能力。比如进程调度、虚拟内存、中断。多数应用，甚至包括驱动程序、文件系统，是在用户空间管理的。")]),v._v(" "),a("p",[v._v("还有一种就是混合类型内核。 混合类型的特点就是架构像微内核，内核中会有一个最小版本的内核，其他功能会在这个能力上搭建。但是实现的时候，是用宏内核的方式实现的，就是内核被做成了一个完整的程序，大部分功能都包含在内核中。就是在宏内核之内有抽象出了一个微内核。")]),v._v(" "),a("h2",{attrs:{id:"window-设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window-设计"}},[v._v("#")]),v._v(" Window 设计")]),v._v(" "),a("p",[v._v("Windows 同样支持 Multitask 和 SMP（对称多处理）。Windows 的内核设计属于混合类型。内核中有一个 Microkernel 模块。而整个内核实现又像宏内核一样，含有的能力非常多，是一个完整的整体。")]),v._v(" "),a("p",[v._v("Windows 下也有自己的可执行文件格式，这个格式叫作 Portable Executable（PE），也就是可移植执行文件，扩展名通常是.exe、.dll、.sys等。")]),v._v(" "),a("p",[v._v("PE 文件的结构和 ELF 结构有很多相通的地方。如下图：")]),v._v(" "),a("p",[v._v("那么下面来看看 Linux 和 Window 的内核有什么区别：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("Windows 有两个内核，最新的是 NT 内核，目前主流的 Windows 产品都是 NT 内核。NT 内核和 Linux 内核非常相似，没有太大的结构化差异。")])]),v._v(" "),a("li",[a("p",[v._v("从整体设计上来看，Linux 是宏内核，NT 内核属于混合型内核。和微内核不同，宏内核和混合类型内核从实现上来看是一个完整的程序。只不过混合类型内核内部也抽象出了微内核的概念，从内核内部看混合型内核的架构更像微内核。")])]),v._v(" "),a("li",[a("p",[v._v("Linux 内核是一个开源的内核；")])]),v._v(" "),a("li",[a("p",[v._v("它们支持的可执行文件格式不同；")])]),v._v(" "),a("li",[a("p",[v._v("它们用到的虚拟化技术不同。")])])]),v._v(" "),a("h2",{attrs:{id:"用户态和内核态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态和内核态"}},[v._v("#")]),v._v(" 用户态和内核态")]),v._v(" "),a("p",[v._v("内核运行在超级权限模式（Supervisor Mode）下，所以拥有很高的权限。按照权限管理的原则，多数应用程序应该运行在最小权限下。因此，很多操作系统，将内存分成了两个区域：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("内核空间（Kernal Space），这个空间只有内核程序可以访问；")])]),v._v(" "),a("li",[a("p",[v._v("用户空间（User Space），这部分内存专门给应用程序使用。")])])]),v._v(" "),a("p",[v._v("用户空间中的代码被限制了只能使用一个局部的内存空间，我们说这些程序在"),a("strong",[v._v("用户态")]),v._v("（User Mode） 执行。内核空间中的代码可以访问所有内存，我们称这些程序在"),a("strong",[v._v("内核态")]),v._v("（Kernal Mode） 执行。")]),v._v(" "),a("h3",{attrs:{id:"系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[v._v("#")]),v._v(" 系统调用")]),v._v(" "),a("p",[v._v("如果用户态程序需要执行系统调用，就需要切换到内核态执行。")]),v._v(" "),a("p",[v._v("当发生系统调用时，用户态的程序发起系统调用。因为系统调用中牵扯特权指令，用户态程序权限不足，因此会中断执行，也就是 Trap（Trap 是一种中断）。")]),v._v(" "),a("p",[v._v("发生中断后，当前 CPU 执行的程序会中断，跳转到中断处理程序。内核程序开始执行，也就是开始处理系统调用。内核处理完成后，主动触发 Trap，这样会再次发生中断，切换回用户态工作。")]),v._v(" "),a("h2",{attrs:{id:"线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型"}},[v._v("#")]),v._v(" 线程模型")]),v._v(" "),a("h3",{attrs:{id:"进程和线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[v._v("#")]),v._v(" 进程和线程")]),v._v(" "),a("p",[v._v("一个应用程序启动后会在内存中创建一个执行副本，这就是进程。Linux 的内核是一个 Monolithic Kernel（宏内核），因此可以看作一个进程。也就是开机的时候，磁盘的内核镜像被导入内存作为一个执行副本，成为内核进程。")]),v._v(" "),a("p",[v._v("进程可以分成用户态进程和内核态进程两类。用户态进程通常是应用程序的副本，内核态进程就是内核本身的进程。如果用户态进程需要申请资源，比如内存，可以通过系统调用向内核申请。")]),v._v(" "),a("p",[v._v("程序在现代操作系统中并不是以进程为单位在执行，而是以一种轻量级进程（Light Weighted Process），也称作线程（Thread）的形式执行。")]),v._v(" "),a("p",[v._v("一个进程可以拥有多个线程。进程创建的时候，一般会有一个主线程随着进程创建而创建。")]),v._v(" "),a("p",[v._v("如果进程想要创造更多的线程，就需要考虑一件事情，这个线程创建在用户态还是内核态。进程可以通过 API 创建用户态的线程，也可以通过系统调用创建内核态的线程。")]),v._v(" "),a("h3",{attrs:{id:"用户态线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态线程"}},[v._v("#")]),v._v(" 用户态线程")]),v._v(" "),a("p",[v._v("用户态线程也称作用户级线程（User Level Thread）。操作系统内核并不知道它的存在，它完全是在用户空间中创建。")]),v._v(" "),a("p",[v._v("用户级线程有很多优势：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("管理开销小：创建、销毁不需要系统调用。")])]),v._v(" "),a("li",[a("p",[v._v("切换成本低：用户空间程序可以自己维护，不需要走操作系统调度。")])])]),v._v(" "),a("p",[v._v("也有很多的缺点：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("与内核协作成本高：比如这种线程完全是用户空间程序在管理，当它进行 I/O 的时候，无法利用到内核的优势，需要频繁进行用户态到内核态的切换。")])]),v._v(" "),a("li",[a("p",[v._v("线程间协作成本高：设想两个线程需要通信，通信需要 I/O，I/O 需要系统调用，因此用户态线程需要支付额外的系统调用成本。")])]),v._v(" "),a("li",[a("p",[v._v("无法利用多核优势：比如操作系统调度的仍然是这个线程所属的进程，所以无论每次一个进程有多少用户态的线程，都只能并发执行一个线程，因此一个进程的多个线程无法利用多核的优势。")])]),v._v(" "),a("li",[a("p",[v._v("操作系统无法针对线程调度进行优化：当一个进程的一个用户态线程阻塞（Block）了，操作系统无法及时发现和处理阻塞问题，它不会更换执行其他线程，从而造成资源浪费。")])])]),v._v(" "),a("h3",{attrs:{id:"内核态线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核态线程"}},[v._v("#")]),v._v(" 内核态线程")]),v._v(" "),a("p",[v._v("内核态线程也称作内核级线程（Kernel Level Thread）。这种线程执行在内核态，可以通过系统调用创造一个内核级线程。")]),v._v(" "),a("p",[v._v("内核级线程有很多优势：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("可以利用多核 CPU 优势：内核拥有较高权限，因此可以在多个 CPU 核心上执行内核线程。")])]),v._v(" "),a("li",[a("p",[v._v("操作系统级优化：内核中的线程操作 I/O 不需要进行系统调用；一个内核线程阻塞了，可以立即让另一个执行。")])])]),v._v(" "),a("p",[v._v("当然也有缺点：")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("创建成本高：创建的时候需要系统调用，也就是切换到内核态。")])]),v._v(" "),a("li",[a("p",[v._v("扩展性差：由一个内核程序管理，不可能数量太多。")])]),v._v(" "),a("li",[a("p",[v._v("切换成本较高：切换的时候，也同样存在需要内核操作，需要切换内核态。")])])]),v._v(" "),a("h3",{attrs:{id:"映射关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#映射关系"}},[v._v("#")]),v._v(" 映射关系")]),v._v(" "),a("p",[v._v("线程简单理解，就是要执行一段程序。程序不会自发的执行，需要操作系统进行调度。")]),v._v(" "),a("p",[v._v("比较常见的一种方式，就是将需要执行的程序，让一个内核线程去执行。毕竟，内核线程是真正的线程。因为它会分配到 CPU 的执行资源。")]),v._v(" "),a("p",[v._v("如果一个进程所有的线程都要自己调度，相当于在进程的主线程中实现分时算法调度每一个线程，也就是所有线程都用操作系统分配给主线程的时间片段执行。这种做法，相当于操作系统调度进程的主线程；进程的主线程进行二级调度，调度自己内部的线程。")]),v._v(" "),a("p",[v._v("这样操作劣势非常明显，无法利用多核优势，每个线程调度分配到的时间较少，而且这种线程在阻塞场景下会直接交出整个进程的执行权限。")]),v._v(" "),a("p",[v._v("可以看出用户态线程创建成本低，问题明显，不可以利用多核。内核态线程，创建成本高，可以利用多核，切换速度慢。")]),v._v(" "),a("p",[v._v("因此通常我们会在内核中预先创建一些线程，并反复利用这些线程。这样，用户态线程和内核态线程之间就构成了下面 4 种可能的关系：")]),v._v(" "),a("h4",{attrs:{id:"多对一-many-to-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对一-many-to-one"}},[v._v("#")]),v._v(" 多对一（Many to One）")]),v._v(" "),a("p",[v._v("用户态进程中的多线程复用一个内核态线程。")]),v._v(" "),a("p",[v._v("这样，极大地减少了创建内核态线程的成本，但是线程不可以并发。")]),v._v(" "),a("h4",{attrs:{id:"一对一-one-to-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一-one-to-one"}},[v._v("#")]),v._v(" 一对一（One to One）")]),v._v(" "),a("p",[v._v("该模型为每个用户态的线程分配一个单独的内核态线程，在这种情况下，每个用户态都需要通过系统调用创建一个绑定的内核线程，并附加在上面执行。 这种模型允许所有线程并发执行，能够充分利用多核优势，Windows NT 内核采取的就是这种模型。但是因为线程较多，对内核调度的压力会明显增加。")]),v._v(" "),a("h4",{attrs:{id:"多对多-many-to-many"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多-many-to-many"}},[v._v("#")]),v._v(" 多对多（Many To Many）")]),v._v(" "),a("p",[v._v("这种模式下会为 n 个用户态线程分配 m 个内核态线程。m 通常可以小于 n。一种可行的策略是将 m 设置为核数。这种多对多的关系，减少了内核线程，同时也保证了多核心并发。")]),v._v(" "),a("h4",{attrs:{id:"两层设计-two-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两层设计-two-level"}},[v._v("#")]),v._v(" 两层设计（Two Level）")]),v._v(" "),a("p",[v._v("这种模型混合了多对多和一对一的特点。多数用户态线程和内核线程是 n 对 m 的关系，少量用户线程可以指定成 1 对 1 的关系。")]),v._v(" "),a("p",[v._v("那么用户态线程和内核态线程的区别是什么呢？")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("用户态线程工作在用户空间，内核态线程工作在内核空间。用户态线程调度完全由进程负责，通常就是由进程的主线程负责。相当于进程主线程的延展，使用的是操作系统分配给进程主线程的时间片段。内核线程由内核维护，由操作系统调度。")])]),v._v(" "),a("li",[a("p",[v._v("用户态线程无法跨核心，一个进程的多个用户态线程不能并发，阻塞一个用户态线程会导致进程的主线程阻塞，直接交出执行权限。这些都是用户态线程的劣势。内核线程可以独立执行，操作系统会分配时间片段。因此内核态线程更完整，也称作轻量级进程。内核态线程创建成本高，切换成本高，创建太多还会给调度算法增加压力，因此不会太多。")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);