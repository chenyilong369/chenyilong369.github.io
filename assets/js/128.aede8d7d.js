(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{487:function(t,s,a){"use strict";a.r(s);var v=a(41),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"跨站脚本攻击-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨站脚本攻击-xss"}},[t._v("#")]),t._v(" 跨站脚本攻击（XSS）")]),t._v(" "),a("p",[t._v("XSS 全称是 Cross Site Scripting，翻译过来就是“跨站脚本”。XSS 攻击是指黑客往 HTML 文件中或者 DOM 中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户实施攻击的一种手段。")]),t._v(" "),a("h2",{attrs:{id:"它的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#它的影响"}},[t._v("#")]),t._v(" 它的影响")]),t._v(" "),a("p",[t._v("当页面被注入了恶意 JS 脚本时，浏览器无法区分这些脚本是被恶意注入的还是正常的页面内容，那么恶意注入 JS 脚本也拥有所有的脚本权限。")]),t._v(" "),a("p",[t._v("当它有了所有的脚本权限后，它可以做：")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("窃取 Cookie 信息")]),t._v("。让恶意 JS 脚本执行 "),a("code",[t._v("document.cookie")]),t._v("获取 Cookie 信息。然后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("监听用户行为")]),t._v("。恶意 JS 可以使用“addEventListener”接口来监听键盘事件（来获取密码等）。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("修改 DOM")]),t._v("伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("生成浮窗广告")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("......")])])]),t._v(" "),a("h2",{attrs:{id:"攻击方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#攻击方式"}},[t._v("#")]),t._v(" 攻击方式")]),t._v(" "),a("p",[t._v("主要分为"),a("strong",[t._v("存储型 XSS 攻击、反射型 XSS 攻击和基于 DOM 的 XSS 攻击")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"存储型-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储型-xss-攻击"}},[t._v("#")]),t._v(" "),a("strong",[t._v("存储型 XSS 攻击")])]),t._v(" "),a("ul",[a("li",[t._v("首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；")]),t._v(" "),a("li",[t._v("然后用户向网站请求包含了恶意 JavaScript 脚本的页面；")]),t._v(" "),a("li",[t._v("当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。")])]),t._v(" "),a("h3",{attrs:{id:"反射型-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反射型-xss-攻击"}},[t._v("#")]),t._v(" 反射型 XSS 攻击")]),t._v(" "),a("p",[t._v("在一个反射型 XSS 攻击过程中，恶意 JS 脚本属于用户发送给网站请求中的一部分，随后网站又把恶意 JS 脚本返回给用户。")]),t._v(" "),a("p",[t._v("Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方。")]),t._v(" "),a("h3",{attrs:{id:"基于-dom-的-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-dom-的-xss-攻击"}},[t._v("#")]),t._v(" 基于 DOM 的 XSS 攻击")]),t._v(" "),a("p",[t._v("基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。")]),t._v(" "),a("h2",{attrs:{id:"阻止-xss-攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻止-xss-攻击"}},[t._v("#")]),t._v(" 阻止 XSS 攻击")]),t._v(" "),a("p",[t._v("我们知道存储型 XSS 攻击和反射型 XSS 攻击都是需要经过 Web 服务器来处理的，因此可以认为这两种类型的漏洞是服务端的安全漏洞。而基于 DOM 的 XSS 攻击全部都是在浏览器端完成的，因此基于 DOM 的 XSS 攻击是属于前端的安全漏洞。")]),t._v(" "),a("p",[t._v("但无论是何种类型的 XSS 攻击，它们都有一个共同点，那就是首先往浏览器中注入恶意脚本，然后再通过恶意脚本将用户信息发送至黑客部署的恶意服务器上。")]),t._v(" "),a("p",[t._v("所以要阻止 XSS 攻击，我们可以通过阻止恶意 JavaScript 脚本的注入和恶意消息的发送来实现。")]),t._v(" "),a("p",[t._v("来看看有什么策略来解决吧。")]),t._v(" "),a("h3",{attrs:{id:"服务器对输入脚本进行过滤或转码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务器对输入脚本进行过滤或转码"}},[t._v("#")]),t._v(" 服务器对输入脚本进行过滤或转码")]),t._v(" "),a("p",[t._v("不管是反射型还是存储型 XSS 攻击，我们都可以在服务器端将一些关键的字符进行转码。这样就会让脚本失去效果。")]),t._v(" "),a("h3",{attrs:{id:"利用-csp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用-csp"}},[t._v("#")]),t._v(" 利用 CSP")]),t._v(" "),a("p",[t._v("虽然在服务器端执行过滤或者转码可以阻止 XSS 攻击的发生，但完全依靠服务器端依然是不够的，我们还需要把 CSP 等策略充分地利用起来，以降低 XSS 攻击带来的风险和后果。")]),t._v(" "),a("p",[t._v("实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能：")]),t._v(" "),a("ul",[a("li",[t._v("限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript 文件也是无法被加载的；")]),t._v(" "),a("li",[t._v("禁止向第三方域提交数据，这样用户数据也不会外泄；")]),t._v(" "),a("li",[t._v("禁止执行内联脚本和未授权的脚本；")]),t._v(" "),a("li",[t._v("还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。")])]),t._v(" "),a("h3",{attrs:{id:"使用-httponly-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-httponly-属性"}},[t._v("#")]),t._v(" 使用 HttpOnly 属性")]),t._v(" "),a("p",[t._v("由于很多 XSS 攻击都是来盗用 Cookie 的，因此还可以通过使用 HttpOnly 属性来保护 Cookie 的安全。")]),t._v(" "),a("p",[t._v("通常服务器可以将某些 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应头来设置的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("set-cookie: NID=189=M8q2FtWbsR8RlcldPVt7qkrqR38LmFY9jUxkKo3-4Bi6Qu_ocNOat7nkYZUTzolHjFnwBw0izgsATSI7TZyiiiaV94qGh-BzEYsNVa7TZmjAYTxYTOM9L_-0CN9ipL6cXi8l6-z41asXtm2uEwcOC5oh9djkffOMhWqQrlnCtOI; expires=Sat, 18-Apr-2020 06:52:22 GMT; path=/; domain=.google.com; HttpOnly\n")])])]),a("p",[t._v("set-cookie 属性值最后使用了 HttpOnly 来标记该 Cookie。顾名思义，使用 HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JS 来读取这段 Cookie。")])])}),[],!1,null,null,null);s.default=_.exports}}]);