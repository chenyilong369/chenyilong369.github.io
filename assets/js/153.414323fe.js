(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{512:function(v,_,t){"use strict";t.r(_);var p=t(41),a=Object(p.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"中断和中断向量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中断和中断向量"}},[v._v("#")]),v._v(" 中断和中断向量")]),v._v(" "),t("p",[v._v("我们以一道题目为例开启该节的学习。Java/JS 等语言为什么可以捕获到键盘的输入？")]),v._v(" "),t("p",[v._v("其实键盘的输入有点类似 Switch-Case 语句，每按下一个不同的按钮，就代表一个不同的值。")]),v._v(" "),t("p",[v._v("键盘上一般不超过 100 个键。因此我们可以考虑用一个 Byte 的数据来描述用户按下了什么键。按键有两个操作，一个是按下、一个是释放，这是两个不同的操作。对于一个 8 位的字节，可以考虑用最高位的 1 来描述按下还是释放的状态，然后后面的 7 位（0~127）描述具体按了哪个键。")]),v._v(" "),t("p",[v._v("处理按键是一个通用程序，可以考虑由操作系统先进行一部分处理，比如：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("用户按下了回车键，先由操作系统进行统一的封装，再把按键的编码转换为字符串Enter方便各种程序使用。")])]),v._v(" "),t("li",[t("p",[v._v("处理组合键这种操作，由操作系统先一步进行计算比较好。因为底层只知道按键、释放，组合键必须结合时间因素判断。")])])]),v._v(" "),t("p",[v._v("当一个 Java 或者 JS 写的应用程序想要响应按键时，应该考虑消息模型。如果程序在操作系统端注册一个响应按键的函数，每次只有真的触发按键时才执行这个函数，这样就能减少开销了。")]),v._v(" "),t("p",[v._v("当处理用户按键时，需要打断正在执行的程序。因为从用户体验上讲，按键应该是一个高优先级的操作。如果需要考虑到程序随时会被中断，去响应其他更高优先级的情况，那么从程序执行的底层就应该支持这个行为，而且最好从硬件层面去支持，这样速度最快。")]),v._v(" "),t("p",[v._v("那么操作系统是怎么知道用户按下的是哪个键呢？我们思考下这个模型，用户每次按键，触发一个 CPU 的能力，这个能力会中断正在执行的程序，去处理按键。那 CPU 内部是不是应该有处理按键的程序呢？这肯定不行，因为我们希望 CPU 就是用来做计算的，如果 CPU 内部有自带的程序，会把问题复杂化。这在软件设计中，叫作耦合。CPU 的工作就是专注高效的执行指令。")]),v._v(" "),t("p",[v._v("因此，每次按键，必须有一个机制通知 CPU。我们可以考虑用总线去通知 CPU，也就是主板在通知 CPU。")]),v._v(" "),t("p",[v._v("CPU 要做的就是一看到中断，就改变 PC 指针（相当于中断正在执行的程序），而 PC 改变成多少，可以根据不同的类型来判断，比如按键就到 0。操作系统就要向这些具体的位置写入指令，当中断发生时，接管程序的控制权，也就是让 PC 指针指向操作系统处理按键的程序。")]),v._v(" "),t("p",[v._v("那么主板如何知道键盘被按下? 这里我们需要一个芯片将按键信息转换成具体按键的值。比如用户按下 A 键，A 键在第几行、第几列，可以看作一个电学信号。接着我们需要芯片把这个电学信号转化为具体的一个数字（一个 Byte）。转化完成后，主板就可以接收到这个数字（按键码），然后将数字写入自己的一个寄存器中，并通知 CPU。")]),v._v(" "),t("p",[v._v("为了方便 CPU 计算，CPU 接收到主板通知后，按键码会被存到一个寄存器里，这样方便处理按键的程序执行。")]),v._v(" "),t("h2",{attrs:{id:"思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思路"}},[v._v("#")]),v._v(" 思路")]),v._v(" "),t("p",[v._v("整体设计分成了 3 层，第一层是硬件设计、第二层是操作系统设计、第三层是程序语言的设计。")]),v._v(" "),t("p",[v._v("按键码的收集，是键盘芯片和主板的能力。主板知道有新的按键后，通知 CPU，CPU 要中断当前执行的程序，将 PC 指针跳转到一个固定的位置，我们称为一次中断（interrupt）。")]),v._v(" "),t("p",[v._v("考虑到系统中会出现各种各样的事件，我们需要根据中断类型来判断PC 指针跳转的位置，中断类型不同，PC 指针跳转的位置也可能会不同。")]),v._v(" "),t("p",[v._v("因此我们需要把不同的中断类型进行分类，这个类型叫作"),t("strong",[v._v("中断识别码")]),v._v("。比如按键，我们可以考虑用编号 16，数字 16 就是按键中断类型的识别码。不同类型的中断发生时，CPU 需要知道 PC 指针该跳转到哪个地址，这个地址，称为中断向量（Interupt Vector）。")]),v._v(" "),t("p",[v._v("因此 CPU 接收到中断后，CPU 根据中断类型操作 PC 指针，找到中断向量。操作系统必须在这之前，修改中断向量，插入一条指令。")]),v._v(" "),t("p",[v._v("操作系统接管之后，以按键程序为例，操作系统会进行一些处理，包括下面的几件事情：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("将按键放入一个队列，保存下来。这是因为，操作系统不能保证及时处理所有的按键，比如当按键过快时，需要先存储下来，再分时慢慢处理。")])]),v._v(" "),t("li",[t("p",[v._v("计算组合键。可以利用按下、释放之间的时间关系。")])]),v._v(" "),t("li",[t("p",[v._v("经过一定计算将按键抽象成消息（事件结构或对象）。")])]),v._v(" "),t("li",[t("p",[v._v("提供 API 给应用程序，让应用程序可以监听操作系统处理后的消息。")])]),v._v(" "),t("li",[t("p",[v._v("分发按键消息给监听按键的程序。")])])]),v._v(" "),t("h2",{attrs:{id:"中断的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中断的类型"}},[v._v("#")]),v._v(" 中断的类型")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("按照中断的触发方分成同步中断和异步中断；")])]),v._v(" "),t("li",[t("p",[v._v("根据中断是否强制触发分成可屏蔽中断和不可屏蔽中断。")])])]),v._v(" "),t("p",[v._v("中断可以由 CPU 指令直接触发，这种主动触发的中断，叫作同步中断。同步中断有几种情况。")]),v._v(" "),t("ul",[t("li",[v._v("系统调用需要从用户态切换内核态，这种情况需要程序触发一个中断，叫作陷阱（Trap），中断触发后需要继续执行系统调用。")]),v._v(" "),t("li",[v._v("还有一种同步中断情况是错误（Fault），通常是因为检测到某种错误，需要触发一个中断，中断响应结束后，会重新执行触发错误的地方，比如后面我们要学习的缺页中断。")]),v._v(" "),t("li",[v._v("最后还有一种情况是程序的异常，这种情况和 Trap 类似，用于实现程序抛出的异常。")])]),v._v(" "),t("p",[v._v("另一部分中断不是由 CPU 直接触发，是因为需要响应外部的通知，比如响应键盘、鼠标等设备而触发的中断。这种中断我们称为"),t("strong",[v._v("异步中断")]),v._v("。")]),v._v(" "),t("p",[v._v("CPU 通常都支持设置一个中断屏蔽位（一个寄存器），设置为 1 之后 CPU 暂时就不再响应中断。对于键盘鼠标输入，比如陷阱、错误、异常等情况，会被临时屏蔽。但是对于一些特别重要的中断，比如 CPU 故障导致的掉电中断，还是会正常触发。可以被屏蔽的中断我们称为可屏蔽中断，多数中断都是可屏蔽中断。")]),v._v(" "),t("p",[v._v("最后，我们回答一下开头的问题：")]),v._v(" "),t("p",[v._v("为了捕获到键盘输入，硬件层面需要把按键抽象成中断，中断 CPU 执行。CPU 根据中断类型找到对应的中断向量。操作系统预置了中断向量，因此发生中断后操作系统接管了程序。操作系统实现了基本解析按键的算法，将按键抽象成键盘事件，并且提供了队列存储多个按键，还提供了监听按键的 API。因此应用程序，比如 Java/Node.js 虚拟机，就可以通过调用操作系统的 API 使用键盘事件。")])])}),[],!1,null,null,null);_.default=a.exports}}]);