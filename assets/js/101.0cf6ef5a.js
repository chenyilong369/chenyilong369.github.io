(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{460:function(t,s,a){"use strict";a.r(s);var n=a(41),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"node-事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-事件循环"}},[t._v("#")]),t._v(" node 事件循环")]),t._v(" "),a("p",[t._v("首先先放张流程图：")]),t._v(" "),a("img",{attrs:{src:t.$withBase("/node/eventLoop01.png"),alt:"eventLoop01"}}),t._v(" "),a("h2",{attrs:{id:"三大关键阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三大关键阶段"}},[t._v("#")]),t._v(" 三大关键阶段")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("执行 "),a("code",[t._v("定时器回调")]),t._v(" 的阶段。检查定时器，如果到了时间，就执行回调。这些定时器就是setTimeout、setInterval。这个阶段暂且叫它"),a("code",[t._v("timer")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("轮询(英文叫"),a("code",[t._v("poll")]),t._v(")阶段。因为在node代码中难免会有异步操作，比如文件I/O，网络I/O等等，那么当这些异步操作做完了，就会来通知JS主线程，怎么通知呢？就是通过'data'、'connect'等事件使得事件循环到达 "),a("code",[t._v("poll")]),t._v(" 阶段。到达了这个阶段后:")]),t._v(" "),a("p",[t._v("如果当前已经存在定时器，而且有定时器到时间了，拿出来执行，eventLoop 将回到timer阶段。")]),t._v(" "),a("p",[t._v("如果没有定时器, 会去看回调函数队列。")]),t._v(" "),a("ul",[a("li",[t._v("如果队列"),a("code",[t._v("不为空")]),t._v("，拿出队列中的方法依次执行")]),t._v(" "),a("li",[t._v("如果队列为空，检查是否有 setImmdiate 的回调\n"),a("ul",[a("li",[t._v("有则前往"),a("code",[t._v("check阶段")]),t._v("(下面会说)")]),t._v(" "),a("li",[a("code",[t._v("没有则继续等待")]),t._v("，相当于阻塞了一段时间(阻塞时间是有上限的), 等待 callback 函数加入队列，加入后会立刻执行。一段时间后"),a("code",[t._v("自动进入 check 阶段")]),t._v("。")])])])])]),t._v(" "),a("li",[a("p",[t._v("check 阶段。这是一个比较简单的阶段，直接执行"),a("code",[t._v("setImmdiate")]),t._v(" 的回调。")])])]),t._v(" "),a("h2",{attrs:{id:"完善"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完善"}},[t._v("#")]),t._v(" 完善")]),t._v(" "),a("p",[t._v("上面的事件循环暂不完善。")]),t._v(" "),a("p",[t._v("当第 1 阶段结束后，可能并不会立即等待到异步事件的响应，这时候 nodejs 会进入到 "),a("code",[t._v("I/O异常的回调阶段")]),t._v("。")]),t._v(" "),a("p",[t._v("在 check 阶段结束后还会进入到 "),a("code",[t._v("关闭事件的回调阶段")]),t._v("。如果一个 socket 或句柄（handle）被突然关闭，例如 socket.destroy()， 'close' 事件的回调就会在这个阶段执行。")]),t._v(" "),a("p",[t._v("于是 nodejs 的 eventLoop 分为下面的几个阶段:")]),t._v(" "),a("ol",[a("li",[t._v("timer 阶段")]),t._v(" "),a("li",[t._v("I/O 异常回调阶段")]),t._v(" "),a("li",[t._v("空闲、预备状态(第2阶段结束，poll 未触发之前)")]),t._v(" "),a("li",[t._v("poll 阶段")]),t._v(" "),a("li",[t._v("check 阶段")]),t._v(" "),a("li",[t._v("关闭事件的回调阶段")])]),t._v(" "),a("h2",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[t._v("#")]),t._v(" 例子")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'timer1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'timer2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'promise2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("上面代码会输出：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("timer1\npromise1\ntime2\npromise2\n")])])]),a("h2",{attrs:{id:"与浏览器的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与浏览器的区别"}},[t._v("#")]),t._v(" 与浏览器的区别")]),t._v(" "),a("p",[t._v("两者最主要的区别在于浏览器中的微任务是在"),a("code",[t._v("每个相应的宏任务")]),t._v("中执行的，而nodejs中的微任务是在"),a("code",[t._v("不同阶段之间")]),t._v("执行的。")]),t._v(" "),a("h2",{attrs:{id:"process-nexttick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#process-nexttick"}},[t._v("#")]),t._v(" process.nextTick")]),t._v(" "),a("p",[t._v("process.nextTick 是一个独立于 eventLoop 的任务队列。")]),t._v(" "),a("p",[t._v("在每一个 eventLoop 阶段完成后会去检查这个队列，如果里面有任务，会让这部分任务"),a("code",[t._v("优先于微任务")]),t._v("执行。")])])}),[],!1,null,null,null);s.default=e.exports}}]);